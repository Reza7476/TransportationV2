// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tranportation;

#nullable disable

namespace Tranportation.Migrations
{
    [DbContext(typeof(TransportationDb))]
    partial class TransportationDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tranportation.Entities.Buses.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Discirminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TypeBus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Buses");

                    b.HasDiscriminator<string>("Discirminator").HasValue("Bus");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tranportation.Entities.Seats.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Tranportation.Entities.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CancelTicket")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Tickets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ticket");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tranportation.Entities.Trips.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Benefit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("DepartureFrom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmptySeat")
                        .HasColumnType("int");

                    b.Property<decimal>("TripPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.ToTable("Trips");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Trip");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tranportation.Entities.Buses.NormalBus", b =>
                {
                    b.HasBaseType("Tranportation.Entities.Buses.Bus");

                    b.HasDiscriminator().HasValue("Normal");
                });

            modelBuilder.Entity("Tranportation.Entities.Buses.VIPBus", b =>
                {
                    b.HasBaseType("Tranportation.Entities.Buses.Bus");

                    b.HasDiscriminator().HasValue("VIPBus");
                });

            modelBuilder.Entity("Tranportation.Entities.Tickets.BuyTicket", b =>
                {
                    b.HasBaseType("Tranportation.Entities.Tickets.Ticket");

                    b.HasDiscriminator().HasValue("BuyTicket");
                });

            modelBuilder.Entity("Tranportation.Entities.Tickets.ReserveTicket", b =>
                {
                    b.HasBaseType("Tranportation.Entities.Tickets.Ticket");

                    b.HasDiscriminator().HasValue("ReserveTicket");
                });

            modelBuilder.Entity("Tranportation.Entities.Trips.NormalTrip", b =>
                {
                    b.HasBaseType("Tranportation.Entities.Trips.Trip");

                    b.HasDiscriminator().HasValue("NormalTrip");
                });

            modelBuilder.Entity("Tranportation.Entities.Trips.VIPTrip", b =>
                {
                    b.HasBaseType("Tranportation.Entities.Trips.Trip");

                    b.HasDiscriminator().HasValue("VipTrip");
                });

            modelBuilder.Entity("Tranportation.Entities.Seats.Seat", b =>
                {
                    b.HasOne("Tranportation.Entities.Trips.Trip", "Trip")
                        .WithMany("Seats")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Tranportation.Entities.Tickets.Ticket", b =>
                {
                    b.HasOne("Tranportation.Entities.Trips.Trip", "Trip")
                        .WithMany("Tickets")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Tranportation.Entities.Trips.Trip", b =>
                {
                    b.HasOne("Tranportation.Entities.Buses.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("Tranportation.Entities.Buses.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Tranportation.Entities.Trips.Trip", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
